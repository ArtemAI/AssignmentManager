// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(AssignmentManagerContext))]
    [Migration("20200722110530_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssigneeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CompletionPercent")
                        .HasColumnType("int");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e6efe661-925a-40dd-9ea8-c194170e35ef"),
                            AssigneeId = new Guid("1e547cab-dbed-41aa-95c9-4afc3ba183a4"),
                            CompletionPercent = 100,
                            Deadline = new DateTime(2020, 7, 19, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Create project's GitHub repo.",
                            Name = "Setup project",
                            Priority = 2,
                            ProjectId = new Guid("529b493e-d3e6-4065-8ed7-4e3a8a7df238"),
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("a5ae9821-fd63-447d-8210-c01451ce9ef7"),
                            AssigneeId = new Guid("1e547cab-dbed-41aa-95c9-4afc3ba183a4"),
                            CompletionPercent = 45,
                            Deadline = new DateTime(2020, 7, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Design high-level architecture of the project.",
                            Name = "Design system architecture",
                            Priority = 3,
                            ProjectId = new Guid("529b493e-d3e6-4065-8ed7-4e3a8a7df238"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("0fadfa8b-d8df-458a-bb68-05b0a7956c89"),
                            AssigneeId = new Guid("1e547cab-dbed-41aa-95c9-4afc3ba183a4"),
                            CompletionPercent = 0,
                            Deadline = new DateTime(2020, 7, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Research and decide on unit test and mocking framework.",
                            Name = "Prepare for Unit Tests",
                            Priority = 2,
                            ProjectId = new Guid("529b493e-d3e6-4065-8ed7-4e3a8a7df238"),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("fbbcfbaf-283e-4029-be35-5e66095dfc9c"),
                            AssigneeId = new Guid("1e547cab-dbed-41aa-95c9-4afc3ba183a4"),
                            CompletionPercent = 100,
                            Deadline = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Perform review of available software storage solutions.",
                            Name = "Review storage solutions",
                            Priority = 0,
                            ProjectId = new Guid("529b493e-d3e6-4065-8ed7-4e3a8a7df238"),
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("680e01a4-57a1-4796-a585-fe6e56836348"),
                            AssigneeId = new Guid("1e547cab-dbed-41aa-95c9-4afc3ba183a4"),
                            CompletionPercent = 75,
                            Deadline = new DateTime(2020, 7, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Improve performance of software that is developed.",
                            Name = "Performance improvements",
                            Priority = 3,
                            ProjectId = new Guid("529b493e-d3e6-4065-8ed7-4e3a8a7df238"),
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("153fa6dc-4320-4ec6-aa08-265593166618"),
                            AssigneeId = new Guid("07d28657-02a1-47ad-be2f-7d0e0b4e45b1"),
                            CompletionPercent = 100,
                            Deadline = new DateTime(2020, 7, 20, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Create plan of automated testing of developed systems.",
                            Name = "Automated testing plan",
                            Priority = 1,
                            ProjectId = new Guid("529b493e-d3e6-4065-8ed7-4e3a8a7df238"),
                            Status = 2
                        },
                        new
                        {
                            Id = new Guid("7aa1ceeb-26f3-486e-b0f0-c4c6dc1c1db6"),
                            AssigneeId = new Guid("07d28657-02a1-47ad-be2f-7d0e0b4e45b1"),
                            CompletionPercent = 50,
                            Deadline = new DateTime(2020, 7, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            Description = "Perform functional testing of developed system.",
                            Name = "Functional testing",
                            Priority = 2,
                            ProjectId = new Guid("529b493e-d3e6-4065-8ed7-4e3a8a7df238"),
                            Status = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f866896-c858-4b0f-9bf3-3fa3dca36827"),
                            Description = "Tiny project with small development team.",
                            Name = "Project A"
                        },
                        new
                        {
                            Id = new Guid("529b493e-d3e6-4065-8ed7-4e3a8a7df238"),
                            Description = "Medium project with average development team.",
                            Name = "Project B"
                        },
                        new
                        {
                            Id = new Guid("3f35412d-1a07-4333-ae60-1fcd642cac61"),
                            Description = "Large project with big development team.",
                            Name = "Project C"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowEmailNotifications")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33293875-ab05-495d-8883-8c23bfb66c2c"),
                            AllowEmailNotifications = false,
                            FirstName = "Andrey",
                            LastName = "Andrienko",
                            ProjectId = new Guid("529b493e-d3e6-4065-8ed7-4e3a8a7df238")
                        },
                        new
                        {
                            Id = new Guid("546c8c7c-4a94-464b-8cc7-fffb35bb0d29"),
                            AllowEmailNotifications = true,
                            FirstName = "Bogdan",
                            LastName = "Bogdanov",
                            ProjectId = new Guid("529b493e-d3e6-4065-8ed7-4e3a8a7df238")
                        },
                        new
                        {
                            Id = new Guid("1e547cab-dbed-41aa-95c9-4afc3ba183a4"),
                            AllowEmailNotifications = true,
                            FirstName = "Artem",
                            LastName = "Chepak",
                            ProjectId = new Guid("529b493e-d3e6-4065-8ed7-4e3a8a7df238")
                        },
                        new
                        {
                            Id = new Guid("07d28657-02a1-47ad-be2f-7d0e0b4e45b1"),
                            AllowEmailNotifications = true,
                            FirstName = "Sergey",
                            LastName = "Sergeev",
                            ProjectId = new Guid("529b493e-d3e6-4065-8ed7-4e3a8a7df238")
                        });
                });

            modelBuilder.Entity("DAL.Entities.Assignment", b =>
                {
                    b.HasOne("DAL.Entities.UserProfile", "Assignee")
                        .WithMany("IssuedAssignments")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Project", "Project")
                        .WithMany("Assignments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Project", b =>
                {
                    b.HasOne("DAL.Entities.UserProfile", "Manager")
                        .WithMany("ManagedProjects")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("DAL.Entities.UserProfile", b =>
                {
                    b.HasOne("DAL.Entities.Project", "Project")
                        .WithMany("Users")
                        .HasForeignKey("ProjectId");
                });
#pragma warning restore 612, 618
        }
    }
}
